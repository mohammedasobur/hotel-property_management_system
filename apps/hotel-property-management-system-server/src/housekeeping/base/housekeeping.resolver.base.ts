/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Housekeeping } from "./Housekeeping";
import { HousekeepingCountArgs } from "./HousekeepingCountArgs";
import { HousekeepingFindManyArgs } from "./HousekeepingFindManyArgs";
import { HousekeepingFindUniqueArgs } from "./HousekeepingFindUniqueArgs";
import { CreateHousekeepingArgs } from "./CreateHousekeepingArgs";
import { UpdateHousekeepingArgs } from "./UpdateHousekeepingArgs";
import { DeleteHousekeepingArgs } from "./DeleteHousekeepingArgs";
import { HousekeepingStatusUpdateInput } from "../HousekeepingStatusUpdateInput";
import { HousekeepingService } from "../housekeeping.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Housekeeping)
export class HousekeepingResolverBase {
  constructor(
    protected readonly service: HousekeepingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Housekeeping",
    action: "read",
    possession: "any",
  })
  async _housekeepingsMeta(
    @graphql.Args() args: HousekeepingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Housekeeping])
  @nestAccessControl.UseRoles({
    resource: "Housekeeping",
    action: "read",
    possession: "any",
  })
  async housekeepings(
    @graphql.Args() args: HousekeepingFindManyArgs
  ): Promise<Housekeeping[]> {
    return this.service.housekeepings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Housekeeping, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Housekeeping",
    action: "read",
    possession: "own",
  })
  async housekeeping(
    @graphql.Args() args: HousekeepingFindUniqueArgs
  ): Promise<Housekeeping | null> {
    const result = await this.service.housekeeping(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Housekeeping)
  @nestAccessControl.UseRoles({
    resource: "Housekeeping",
    action: "create",
    possession: "any",
  })
  async createHousekeeping(
    @graphql.Args() args: CreateHousekeepingArgs
  ): Promise<Housekeeping> {
    return await this.service.createHousekeeping({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Housekeeping)
  @nestAccessControl.UseRoles({
    resource: "Housekeeping",
    action: "update",
    possession: "any",
  })
  async updateHousekeeping(
    @graphql.Args() args: UpdateHousekeepingArgs
  ): Promise<Housekeeping | null> {
    try {
      return await this.service.updateHousekeeping({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Housekeeping)
  @nestAccessControl.UseRoles({
    resource: "Housekeeping",
    action: "delete",
    possession: "any",
  })
  async deleteHousekeeping(
    @graphql.Args() args: DeleteHousekeepingArgs
  ): Promise<Housekeeping | null> {
    try {
      return await this.service.deleteHousekeeping(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async ModifyHousekeepingStatus(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.ModifyHousekeepingStatus(args);
  }

  @graphql.Query(() => String)
  async UpdateHousekeepingStatus(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.UpdateHousekeepingStatus(args);
  }

  @graphql.Mutation(() => Housekeeping)
  async UpdateRoomHousekeepingStatus(
    @graphql.Args()
    args: HousekeepingStatusUpdateInput
  ): Promise<Housekeeping> {
    return this.service.UpdateRoomHousekeepingStatus(args);
  }
}
