/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Guest as PrismaGuest,
  Reservation as PrismaReservation,
} from "@prisma/client";

export class GuestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GuestCountArgs, "select">): Promise<number> {
    return this.prisma.guest.count(args);
  }

  async guests(args: Prisma.GuestFindManyArgs): Promise<PrismaGuest[]> {
    return this.prisma.guest.findMany(args);
  }
  async guest(args: Prisma.GuestFindUniqueArgs): Promise<PrismaGuest | null> {
    return this.prisma.guest.findUnique(args);
  }
  async createGuest(args: Prisma.GuestCreateArgs): Promise<PrismaGuest> {
    return this.prisma.guest.create(args);
  }
  async updateGuest(args: Prisma.GuestUpdateArgs): Promise<PrismaGuest> {
    return this.prisma.guest.update(args);
  }
  async deleteGuest(args: Prisma.GuestDeleteArgs): Promise<PrismaGuest> {
    return this.prisma.guest.delete(args);
  }

  async findReservations(
    parentId: string,
    args: Prisma.ReservationFindManyArgs
  ): Promise<PrismaReservation[]> {
    return this.prisma.guest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reservations(args);
  }
}
